// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysqlmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ClickTracker is an object representing the database table.
type ClickTracker struct {
	ID                int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name              string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	URLName           null.String `boil:"url_name" json:"url_name,omitempty" toml:"url_name" yaml:"url_name,omitempty"`
	RedirectURL       int         `boil:"redirect_url" json:"redirect_url" toml:"redirect_url" yaml:"redirect_url"`
	Clicks            int         `boil:"clicks" json:"clicks" toml:"clicks" yaml:"clicks"`
	UniqueClicks      int         `boil:"unique_clicks" json:"unique_clicks" toml:"unique_clicks" yaml:"unique_clicks"`
	LastImpressionAt  null.Time   `boil:"last_impression_at" json:"last_impression_at,omitempty" toml:"last_impression_at" yaml:"last_impression_at,omitempty"`
	ClickTrackerSetID int         `boil:"click_tracker_set_id" json:"click_tracker_set_id" toml:"click_tracker_set_id" yaml:"click_tracker_set_id"`
	CreatedBy         null.Int    `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	LastUpdatedBy     null.Int    `boil:"last_updated_by" json:"last_updated_by,omitempty" toml:"last_updated_by" yaml:"last_updated_by,omitempty"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	LastUpdatedAt     null.Time   `boil:"last_updated_at" json:"last_updated_at,omitempty" toml:"last_updated_at" yaml:"last_updated_at,omitempty"`
	IsActive          bool        `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`

	R *clickTrackerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clickTrackerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClickTrackerColumns = struct {
	ID                string
	Name              string
	URLName           string
	RedirectURL       string
	Clicks            string
	UniqueClicks      string
	LastImpressionAt  string
	ClickTrackerSetID string
	CreatedBy         string
	LastUpdatedBy     string
	CreatedAt         string
	LastUpdatedAt     string
	IsActive          string
}{
	ID:                "id",
	Name:              "name",
	URLName:           "url_name",
	RedirectURL:       "redirect_url",
	Clicks:            "clicks",
	UniqueClicks:      "unique_clicks",
	LastImpressionAt:  "last_impression_at",
	ClickTrackerSetID: "click_tracker_set_id",
	CreatedBy:         "created_by",
	LastUpdatedBy:     "last_updated_by",
	CreatedAt:         "created_at",
	LastUpdatedAt:     "last_updated_at",
	IsActive:          "is_active",
}

var ClickTrackerTableColumns = struct {
	ID                string
	Name              string
	URLName           string
	RedirectURL       string
	Clicks            string
	UniqueClicks      string
	LastImpressionAt  string
	ClickTrackerSetID string
	CreatedBy         string
	LastUpdatedBy     string
	CreatedAt         string
	LastUpdatedAt     string
	IsActive          string
}{
	ID:                "click_tracker.id",
	Name:              "click_tracker.name",
	URLName:           "click_tracker.url_name",
	RedirectURL:       "click_tracker.redirect_url",
	Clicks:            "click_tracker.clicks",
	UniqueClicks:      "click_tracker.unique_clicks",
	LastImpressionAt:  "click_tracker.last_impression_at",
	ClickTrackerSetID: "click_tracker.click_tracker_set_id",
	CreatedBy:         "click_tracker.created_by",
	LastUpdatedBy:     "click_tracker.last_updated_by",
	CreatedAt:         "click_tracker.created_at",
	LastUpdatedAt:     "click_tracker.last_updated_at",
	IsActive:          "click_tracker.is_active",
}

// Generated where

var ClickTrackerWhere = struct {
	ID                whereHelperint
	Name              whereHelperstring
	URLName           whereHelpernull_String
	RedirectURL       whereHelperint
	Clicks            whereHelperint
	UniqueClicks      whereHelperint
	LastImpressionAt  whereHelpernull_Time
	ClickTrackerSetID whereHelperint
	CreatedBy         whereHelpernull_Int
	LastUpdatedBy     whereHelpernull_Int
	CreatedAt         whereHelpertime_Time
	LastUpdatedAt     whereHelpernull_Time
	IsActive          whereHelperbool
}{
	ID:                whereHelperint{field: "`click_tracker`.`id`"},
	Name:              whereHelperstring{field: "`click_tracker`.`name`"},
	URLName:           whereHelpernull_String{field: "`click_tracker`.`url_name`"},
	RedirectURL:       whereHelperint{field: "`click_tracker`.`redirect_url`"},
	Clicks:            whereHelperint{field: "`click_tracker`.`clicks`"},
	UniqueClicks:      whereHelperint{field: "`click_tracker`.`unique_clicks`"},
	LastImpressionAt:  whereHelpernull_Time{field: "`click_tracker`.`last_impression_at`"},
	ClickTrackerSetID: whereHelperint{field: "`click_tracker`.`click_tracker_set_id`"},
	CreatedBy:         whereHelpernull_Int{field: "`click_tracker`.`created_by`"},
	LastUpdatedBy:     whereHelpernull_Int{field: "`click_tracker`.`last_updated_by`"},
	CreatedAt:         whereHelpertime_Time{field: "`click_tracker`.`created_at`"},
	LastUpdatedAt:     whereHelpernull_Time{field: "`click_tracker`.`last_updated_at`"},
	IsActive:          whereHelperbool{field: "`click_tracker`.`is_active`"},
}

// ClickTrackerRels is where relationship names are stored.
var ClickTrackerRels = struct {
	ClickTrackerSet   string
	CreatedByUser     string
	LastUpdatedByUser string
	ClickTrackerLogs  string
}{
	ClickTrackerSet:   "ClickTrackerSet",
	CreatedByUser:     "CreatedByUser",
	LastUpdatedByUser: "LastUpdatedByUser",
	ClickTrackerLogs:  "ClickTrackerLogs",
}

// clickTrackerR is where relationships are stored.
type clickTrackerR struct {
	ClickTrackerSet   *ClickTrackerSet     `boil:"ClickTrackerSet" json:"ClickTrackerSet" toml:"ClickTrackerSet" yaml:"ClickTrackerSet"`
	CreatedByUser     *User                `boil:"CreatedByUser" json:"CreatedByUser" toml:"CreatedByUser" yaml:"CreatedByUser"`
	LastUpdatedByUser *User                `boil:"LastUpdatedByUser" json:"LastUpdatedByUser" toml:"LastUpdatedByUser" yaml:"LastUpdatedByUser"`
	ClickTrackerLogs  ClickTrackerLogSlice `boil:"ClickTrackerLogs" json:"ClickTrackerLogs" toml:"ClickTrackerLogs" yaml:"ClickTrackerLogs"`
}

// NewStruct creates a new relationship struct
func (*clickTrackerR) NewStruct() *clickTrackerR {
	return &clickTrackerR{}
}

func (r *clickTrackerR) GetClickTrackerSet() *ClickTrackerSet {
	if r == nil {
		return nil
	}
	return r.ClickTrackerSet
}

func (r *clickTrackerR) GetCreatedByUser() *User {
	if r == nil {
		return nil
	}
	return r.CreatedByUser
}

func (r *clickTrackerR) GetLastUpdatedByUser() *User {
	if r == nil {
		return nil
	}
	return r.LastUpdatedByUser
}

func (r *clickTrackerR) GetClickTrackerLogs() ClickTrackerLogSlice {
	if r == nil {
		return nil
	}
	return r.ClickTrackerLogs
}

// clickTrackerL is where Load methods for each relationship are stored.
type clickTrackerL struct{}

var (
	clickTrackerAllColumns            = []string{"id", "name", "url_name", "redirect_url", "clicks", "unique_clicks", "last_impression_at", "click_tracker_set_id", "created_by", "last_updated_by", "created_at", "last_updated_at", "is_active"}
	clickTrackerColumnsWithoutDefault = []string{"name", "url_name", "last_impression_at", "click_tracker_set_id", "created_by", "last_updated_by", "last_updated_at"}
	clickTrackerColumnsWithDefault    = []string{"id", "redirect_url", "clicks", "unique_clicks", "created_at", "is_active"}
	clickTrackerPrimaryKeyColumns     = []string{"id"}
	clickTrackerGeneratedColumns      = []string{}
)

type (
	// ClickTrackerSlice is an alias for a slice of pointers to ClickTracker.
	// This should almost always be used instead of []ClickTracker.
	ClickTrackerSlice []*ClickTracker

	clickTrackerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clickTrackerType                 = reflect.TypeOf(&ClickTracker{})
	clickTrackerMapping              = queries.MakeStructMapping(clickTrackerType)
	clickTrackerPrimaryKeyMapping, _ = queries.BindMapping(clickTrackerType, clickTrackerMapping, clickTrackerPrimaryKeyColumns)
	clickTrackerInsertCacheMut       sync.RWMutex
	clickTrackerInsertCache          = make(map[string]insertCache)
	clickTrackerUpdateCacheMut       sync.RWMutex
	clickTrackerUpdateCache          = make(map[string]updateCache)
	clickTrackerUpsertCacheMut       sync.RWMutex
	clickTrackerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single clickTracker record from the query.
func (q clickTrackerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClickTracker, error) {
	o := &ClickTracker{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysqlmodel: failed to execute a one query for click_tracker")
	}

	return o, nil
}

// All returns all ClickTracker records from the query.
func (q clickTrackerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClickTrackerSlice, error) {
	var o []*ClickTracker

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysqlmodel: failed to assign all query results to ClickTracker slice")
	}

	return o, nil
}

// Count returns the count of all ClickTracker records in the query.
func (q clickTrackerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to count click_tracker rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clickTrackerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysqlmodel: failed to check if click_tracker exists")
	}

	return count > 0, nil
}

// ClickTrackerSet pointed to by the foreign key.
func (o *ClickTracker) ClickTrackerSet(mods ...qm.QueryMod) clickTrackerSetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ClickTrackerSetID),
	}

	queryMods = append(queryMods, mods...)

	return ClickTrackerSets(queryMods...)
}

// CreatedByUser pointed to by the foreign key.
func (o *ClickTracker) CreatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CreatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LastUpdatedByUser pointed to by the foreign key.
func (o *ClickTracker) LastUpdatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.LastUpdatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// ClickTrackerLogs retrieves all the click_tracker_log's ClickTrackerLogs with an executor.
func (o *ClickTracker) ClickTrackerLogs(mods ...qm.QueryMod) clickTrackerLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`click_tracker_log`.`click_tracker_id`=?", o.ID),
	)

	return ClickTrackerLogs(queryMods...)
}

// LoadClickTrackerSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (clickTrackerL) LoadClickTrackerSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClickTracker interface{}, mods queries.Applicator) error {
	var slice []*ClickTracker
	var object *ClickTracker

	if singular {
		var ok bool
		object, ok = maybeClickTracker.(*ClickTracker)
		if !ok {
			object = new(ClickTracker)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeClickTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeClickTracker))
			}
		}
	} else {
		s, ok := maybeClickTracker.(*[]*ClickTracker)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeClickTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeClickTracker))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &clickTrackerR{}
		}
		args[object.ClickTrackerSetID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clickTrackerR{}
			}

			args[obj.ClickTrackerSetID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`click_tracker_set`),
		qm.WhereIn(`click_tracker_set.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ClickTrackerSet")
	}

	var resultSlice []*ClickTrackerSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ClickTrackerSet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for click_tracker_set")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for click_tracker_set")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ClickTrackerSet = foreign
		if foreign.R == nil {
			foreign.R = &clickTrackerSetR{}
		}
		foreign.R.ClickTrackers = append(foreign.R.ClickTrackers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ClickTrackerSetID == foreign.ID {
				local.R.ClickTrackerSet = foreign
				if foreign.R == nil {
					foreign.R = &clickTrackerSetR{}
				}
				foreign.R.ClickTrackers = append(foreign.R.ClickTrackers, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (clickTrackerL) LoadCreatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClickTracker interface{}, mods queries.Applicator) error {
	var slice []*ClickTracker
	var object *ClickTracker

	if singular {
		var ok bool
		object, ok = maybeClickTracker.(*ClickTracker)
		if !ok {
			object = new(ClickTracker)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeClickTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeClickTracker))
			}
		}
	} else {
		s, ok := maybeClickTracker.(*[]*ClickTracker)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeClickTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeClickTracker))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &clickTrackerR{}
		}
		if !queries.IsNil(object.CreatedBy) {
			args[object.CreatedBy] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clickTrackerR{}
			}

			if !queries.IsNil(obj.CreatedBy) {
				args[obj.CreatedBy] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByClickTrackers = append(foreign.R.CreatedByClickTrackers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatedBy, foreign.ID) {
				local.R.CreatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByClickTrackers = append(foreign.R.CreatedByClickTrackers, local)
				break
			}
		}
	}

	return nil
}

// LoadLastUpdatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (clickTrackerL) LoadLastUpdatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClickTracker interface{}, mods queries.Applicator) error {
	var slice []*ClickTracker
	var object *ClickTracker

	if singular {
		var ok bool
		object, ok = maybeClickTracker.(*ClickTracker)
		if !ok {
			object = new(ClickTracker)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeClickTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeClickTracker))
			}
		}
	} else {
		s, ok := maybeClickTracker.(*[]*ClickTracker)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeClickTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeClickTracker))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &clickTrackerR{}
		}
		if !queries.IsNil(object.LastUpdatedBy) {
			args[object.LastUpdatedBy] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clickTrackerR{}
			}

			if !queries.IsNil(obj.LastUpdatedBy) {
				args[obj.LastUpdatedBy] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LastUpdatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.LastUpdatedByClickTrackers = append(foreign.R.LastUpdatedByClickTrackers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LastUpdatedBy, foreign.ID) {
				local.R.LastUpdatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.LastUpdatedByClickTrackers = append(foreign.R.LastUpdatedByClickTrackers, local)
				break
			}
		}
	}

	return nil
}

// LoadClickTrackerLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (clickTrackerL) LoadClickTrackerLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClickTracker interface{}, mods queries.Applicator) error {
	var slice []*ClickTracker
	var object *ClickTracker

	if singular {
		var ok bool
		object, ok = maybeClickTracker.(*ClickTracker)
		if !ok {
			object = new(ClickTracker)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeClickTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeClickTracker))
			}
		}
	} else {
		s, ok := maybeClickTracker.(*[]*ClickTracker)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeClickTracker)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeClickTracker))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &clickTrackerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clickTrackerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`click_tracker_log`),
		qm.WhereIn(`click_tracker_log.click_tracker_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load click_tracker_log")
	}

	var resultSlice []*ClickTrackerLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice click_tracker_log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on click_tracker_log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for click_tracker_log")
	}

	if singular {
		object.R.ClickTrackerLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &clickTrackerLogR{}
			}
			foreign.R.ClickTracker = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ClickTrackerID {
				local.R.ClickTrackerLogs = append(local.R.ClickTrackerLogs, foreign)
				if foreign.R == nil {
					foreign.R = &clickTrackerLogR{}
				}
				foreign.R.ClickTracker = local
				break
			}
		}
	}

	return nil
}

// SetClickTrackerSet of the clickTracker to the related item.
// Sets o.R.ClickTrackerSet to related.
// Adds o to related.R.ClickTrackers.
func (o *ClickTracker) SetClickTrackerSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ClickTrackerSet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `click_tracker` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"click_tracker_set_id"}),
		strmangle.WhereClause("`", "`", 0, clickTrackerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ClickTrackerSetID = related.ID
	if o.R == nil {
		o.R = &clickTrackerR{
			ClickTrackerSet: related,
		}
	} else {
		o.R.ClickTrackerSet = related
	}

	if related.R == nil {
		related.R = &clickTrackerSetR{
			ClickTrackers: ClickTrackerSlice{o},
		}
	} else {
		related.R.ClickTrackers = append(related.R.ClickTrackers, o)
	}

	return nil
}

// SetCreatedByUser of the clickTracker to the related item.
// Sets o.R.CreatedByUser to related.
// Adds o to related.R.CreatedByClickTrackers.
func (o *ClickTracker) SetCreatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `click_tracker` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"created_by"}),
		strmangle.WhereClause("`", "`", 0, clickTrackerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatedBy, related.ID)
	if o.R == nil {
		o.R = &clickTrackerR{
			CreatedByUser: related,
		}
	} else {
		o.R.CreatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByClickTrackers: ClickTrackerSlice{o},
		}
	} else {
		related.R.CreatedByClickTrackers = append(related.R.CreatedByClickTrackers, o)
	}

	return nil
}

// RemoveCreatedByUser relationship.
// Sets o.R.CreatedByUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ClickTracker) RemoveCreatedByUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.CreatedBy, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("created_by")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CreatedByUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatedByClickTrackers {
		if queries.Equal(o.CreatedBy, ri.CreatedBy) {
			continue
		}

		ln := len(related.R.CreatedByClickTrackers)
		if ln > 1 && i < ln-1 {
			related.R.CreatedByClickTrackers[i] = related.R.CreatedByClickTrackers[ln-1]
		}
		related.R.CreatedByClickTrackers = related.R.CreatedByClickTrackers[:ln-1]
		break
	}
	return nil
}

// SetLastUpdatedByUser of the clickTracker to the related item.
// Sets o.R.LastUpdatedByUser to related.
// Adds o to related.R.LastUpdatedByClickTrackers.
func (o *ClickTracker) SetLastUpdatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `click_tracker` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"last_updated_by"}),
		strmangle.WhereClause("`", "`", 0, clickTrackerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LastUpdatedBy, related.ID)
	if o.R == nil {
		o.R = &clickTrackerR{
			LastUpdatedByUser: related,
		}
	} else {
		o.R.LastUpdatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			LastUpdatedByClickTrackers: ClickTrackerSlice{o},
		}
	} else {
		related.R.LastUpdatedByClickTrackers = append(related.R.LastUpdatedByClickTrackers, o)
	}

	return nil
}

// RemoveLastUpdatedByUser relationship.
// Sets o.R.LastUpdatedByUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ClickTracker) RemoveLastUpdatedByUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.LastUpdatedBy, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("last_updated_by")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.LastUpdatedByUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.LastUpdatedByClickTrackers {
		if queries.Equal(o.LastUpdatedBy, ri.LastUpdatedBy) {
			continue
		}

		ln := len(related.R.LastUpdatedByClickTrackers)
		if ln > 1 && i < ln-1 {
			related.R.LastUpdatedByClickTrackers[i] = related.R.LastUpdatedByClickTrackers[ln-1]
		}
		related.R.LastUpdatedByClickTrackers = related.R.LastUpdatedByClickTrackers[:ln-1]
		break
	}
	return nil
}

// AddClickTrackerLogs adds the given related objects to the existing relationships
// of the click_tracker, optionally inserting them as new records.
// Appends related to o.R.ClickTrackerLogs.
// Sets related.R.ClickTracker appropriately.
func (o *ClickTracker) AddClickTrackerLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ClickTrackerLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ClickTrackerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `click_tracker_log` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"click_tracker_id"}),
				strmangle.WhereClause("`", "`", 0, clickTrackerLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ClickTrackerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &clickTrackerR{
			ClickTrackerLogs: related,
		}
	} else {
		o.R.ClickTrackerLogs = append(o.R.ClickTrackerLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &clickTrackerLogR{
				ClickTracker: o,
			}
		} else {
			rel.R.ClickTracker = o
		}
	}
	return nil
}

// ClickTrackers retrieves all the records using an executor.
func ClickTrackers(mods ...qm.QueryMod) clickTrackerQuery {
	mods = append(mods, qm.From("`click_tracker`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`click_tracker`.*"})
	}

	return clickTrackerQuery{q}
}

// FindClickTracker retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClickTracker(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ClickTracker, error) {
	clickTrackerObj := &ClickTracker{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `click_tracker` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, clickTrackerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysqlmodel: unable to select from click_tracker")
	}

	return clickTrackerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClickTracker) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysqlmodel: no click_tracker provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(clickTrackerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clickTrackerInsertCacheMut.RLock()
	cache, cached := clickTrackerInsertCache[key]
	clickTrackerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clickTrackerAllColumns,
			clickTrackerColumnsWithDefault,
			clickTrackerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clickTrackerType, clickTrackerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clickTrackerType, clickTrackerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `click_tracker` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `click_tracker` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `click_tracker` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, clickTrackerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to insert into click_tracker")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == clickTrackerMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to populate default values for click_tracker")
	}

CacheNoHooks:
	if !cached {
		clickTrackerInsertCacheMut.Lock()
		clickTrackerInsertCache[key] = cache
		clickTrackerInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ClickTracker.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClickTracker) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	clickTrackerUpdateCacheMut.RLock()
	cache, cached := clickTrackerUpdateCache[key]
	clickTrackerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clickTrackerAllColumns,
			clickTrackerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("mysqlmodel: unable to update click_tracker, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `click_tracker` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, clickTrackerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clickTrackerType, clickTrackerMapping, append(wl, clickTrackerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to update click_tracker row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by update for click_tracker")
	}

	if !cached {
		clickTrackerUpdateCacheMut.Lock()
		clickTrackerUpdateCache[key] = cache
		clickTrackerUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q clickTrackerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to update all for click_tracker")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to retrieve rows affected for click_tracker")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClickTrackerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysqlmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clickTrackerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `click_tracker` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clickTrackerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to update all in clickTracker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to retrieve rows affected all in update all clickTracker")
	}
	return rowsAff, nil
}

var mySQLClickTrackerUniqueColumns = []string{
	"id",
	"name",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ClickTracker) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysqlmodel: no click_tracker provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(clickTrackerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLClickTrackerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clickTrackerUpsertCacheMut.RLock()
	cache, cached := clickTrackerUpsertCache[key]
	clickTrackerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			clickTrackerAllColumns,
			clickTrackerColumnsWithDefault,
			clickTrackerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			clickTrackerAllColumns,
			clickTrackerPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysqlmodel: unable to upsert click_tracker, could not build update column list")
		}

		ret := strmangle.SetComplement(clickTrackerAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`click_tracker`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `click_tracker` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(clickTrackerType, clickTrackerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clickTrackerType, clickTrackerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to upsert for click_tracker")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == clickTrackerMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(clickTrackerType, clickTrackerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to retrieve unique values for click_tracker")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to populate default values for click_tracker")
	}

CacheNoHooks:
	if !cached {
		clickTrackerUpsertCacheMut.Lock()
		clickTrackerUpsertCache[key] = cache
		clickTrackerUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ClickTracker record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClickTracker) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysqlmodel: no ClickTracker provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clickTrackerPrimaryKeyMapping)
	sql := "DELETE FROM `click_tracker` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to delete from click_tracker")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by delete for click_tracker")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clickTrackerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysqlmodel: no clickTrackerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to delete all from click_tracker")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by deleteall for click_tracker")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClickTrackerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clickTrackerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `click_tracker` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clickTrackerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to delete all from clickTracker slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by deleteall for click_tracker")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClickTracker) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClickTracker(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClickTrackerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClickTrackerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clickTrackerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `click_tracker`.* FROM `click_tracker` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clickTrackerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to reload all in ClickTrackerSlice")
	}

	*o = slice

	return nil
}

// ClickTrackerExists checks if the ClickTracker row exists.
func ClickTrackerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `click_tracker` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysqlmodel: unable to check if click_tracker exists")
	}

	return exists, nil
}

// Exists checks if the ClickTracker row exists.
func (o *ClickTracker) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ClickTrackerExists(ctx, exec, o.ID)
}
