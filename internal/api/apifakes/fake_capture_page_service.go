// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"context"
	"sync"

	"github.com/dembygenesis/local.tools/internal/model"
)

type FakeCapturePageService struct {
	CreateCapturePageStub        func(context.Context, *model.CreateCapturePage) (*model.CapturePage, error)
	createCapturePageMutex       sync.RWMutex
	createCapturePageArgsForCall []struct {
		arg1 context.Context
		arg2 *model.CreateCapturePage
	}
	createCapturePageReturns struct {
		result1 *model.CapturePage
		result2 error
	}
	createCapturePageReturnsOnCall map[int]struct {
		result1 *model.CapturePage
		result2 error
	}
	DeleteCapturePageStub        func(context.Context, *model.DeleteCapturePage) error
	deleteCapturePageMutex       sync.RWMutex
	deleteCapturePageArgsForCall []struct {
		arg1 context.Context
		arg2 *model.DeleteCapturePage
	}
	deleteCapturePageReturns struct {
		result1 error
	}
	deleteCapturePageReturnsOnCall map[int]struct {
		result1 error
	}
	ListCapturePagesStub        func(context.Context, *model.CapturePageFilters) (*model.PaginatedCapturePages, error)
	listCapturePagesMutex       sync.RWMutex
	listCapturePagesArgsForCall []struct {
		arg1 context.Context
		arg2 *model.CapturePageFilters
	}
	listCapturePagesReturns struct {
		result1 *model.PaginatedCapturePages
		result2 error
	}
	listCapturePagesReturnsOnCall map[int]struct {
		result1 *model.PaginatedCapturePages
		result2 error
	}
	RestoreCapturePageStub        func(context.Context, *model.RestoreCapturePage) error
	restoreCapturePageMutex       sync.RWMutex
	restoreCapturePageArgsForCall []struct {
		arg1 context.Context
		arg2 *model.RestoreCapturePage
	}
	restoreCapturePageReturns struct {
		result1 error
	}
	restoreCapturePageReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateCapturePageStub        func(context.Context, *model.UpdateCapturePage) (*model.CapturePage, error)
	updateCapturePageMutex       sync.RWMutex
	updateCapturePageArgsForCall []struct {
		arg1 context.Context
		arg2 *model.UpdateCapturePage
	}
	updateCapturePageReturns struct {
		result1 *model.CapturePage
		result2 error
	}
	updateCapturePageReturnsOnCall map[int]struct {
		result1 *model.CapturePage
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCapturePageService) CreateCapturePage(arg1 context.Context, arg2 *model.CreateCapturePage) (*model.CapturePage, error) {
	fake.createCapturePageMutex.Lock()
	ret, specificReturn := fake.createCapturePageReturnsOnCall[len(fake.createCapturePageArgsForCall)]
	fake.createCapturePageArgsForCall = append(fake.createCapturePageArgsForCall, struct {
		arg1 context.Context
		arg2 *model.CreateCapturePage
	}{arg1, arg2})
	stub := fake.CreateCapturePageStub
	fakeReturns := fake.createCapturePageReturns
	fake.recordInvocation("CreateCapturePage", []interface{}{arg1, arg2})
	fake.createCapturePageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCapturePageService) CreateCapturePageCallCount() int {
	fake.createCapturePageMutex.RLock()
	defer fake.createCapturePageMutex.RUnlock()
	return len(fake.createCapturePageArgsForCall)
}

func (fake *FakeCapturePageService) CreateCapturePageCalls(stub func(context.Context, *model.CreateCapturePage) (*model.CapturePage, error)) {
	fake.createCapturePageMutex.Lock()
	defer fake.createCapturePageMutex.Unlock()
	fake.CreateCapturePageStub = stub
}

func (fake *FakeCapturePageService) CreateCapturePageArgsForCall(i int) (context.Context, *model.CreateCapturePage) {
	fake.createCapturePageMutex.RLock()
	defer fake.createCapturePageMutex.RUnlock()
	argsForCall := fake.createCapturePageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCapturePageService) CreateCapturePageReturns(result1 *model.CapturePage, result2 error) {
	fake.createCapturePageMutex.Lock()
	defer fake.createCapturePageMutex.Unlock()
	fake.CreateCapturePageStub = nil
	fake.createCapturePageReturns = struct {
		result1 *model.CapturePage
		result2 error
	}{result1, result2}
}

func (fake *FakeCapturePageService) CreateCapturePageReturnsOnCall(i int, result1 *model.CapturePage, result2 error) {
	fake.createCapturePageMutex.Lock()
	defer fake.createCapturePageMutex.Unlock()
	fake.CreateCapturePageStub = nil
	if fake.createCapturePageReturnsOnCall == nil {
		fake.createCapturePageReturnsOnCall = make(map[int]struct {
			result1 *model.CapturePage
			result2 error
		})
	}
	fake.createCapturePageReturnsOnCall[i] = struct {
		result1 *model.CapturePage
		result2 error
	}{result1, result2}
}

func (fake *FakeCapturePageService) DeleteCapturePage(arg1 context.Context, arg2 *model.DeleteCapturePage) error {
	fake.deleteCapturePageMutex.Lock()
	ret, specificReturn := fake.deleteCapturePageReturnsOnCall[len(fake.deleteCapturePageArgsForCall)]
	fake.deleteCapturePageArgsForCall = append(fake.deleteCapturePageArgsForCall, struct {
		arg1 context.Context
		arg2 *model.DeleteCapturePage
	}{arg1, arg2})
	stub := fake.DeleteCapturePageStub
	fakeReturns := fake.deleteCapturePageReturns
	fake.recordInvocation("DeleteCapturePage", []interface{}{arg1, arg2})
	fake.deleteCapturePageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCapturePageService) DeleteCapturePageCallCount() int {
	fake.deleteCapturePageMutex.RLock()
	defer fake.deleteCapturePageMutex.RUnlock()
	return len(fake.deleteCapturePageArgsForCall)
}

func (fake *FakeCapturePageService) DeleteCapturePageCalls(stub func(context.Context, *model.DeleteCapturePage) error) {
	fake.deleteCapturePageMutex.Lock()
	defer fake.deleteCapturePageMutex.Unlock()
	fake.DeleteCapturePageStub = stub
}

func (fake *FakeCapturePageService) DeleteCapturePageArgsForCall(i int) (context.Context, *model.DeleteCapturePage) {
	fake.deleteCapturePageMutex.RLock()
	defer fake.deleteCapturePageMutex.RUnlock()
	argsForCall := fake.deleteCapturePageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCapturePageService) DeleteCapturePageReturns(result1 error) {
	fake.deleteCapturePageMutex.Lock()
	defer fake.deleteCapturePageMutex.Unlock()
	fake.DeleteCapturePageStub = nil
	fake.deleteCapturePageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCapturePageService) DeleteCapturePageReturnsOnCall(i int, result1 error) {
	fake.deleteCapturePageMutex.Lock()
	defer fake.deleteCapturePageMutex.Unlock()
	fake.DeleteCapturePageStub = nil
	if fake.deleteCapturePageReturnsOnCall == nil {
		fake.deleteCapturePageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteCapturePageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCapturePageService) ListCapturePages(arg1 context.Context, arg2 *model.CapturePageFilters) (*model.PaginatedCapturePages, error) {
	fake.listCapturePagesMutex.Lock()
	ret, specificReturn := fake.listCapturePagesReturnsOnCall[len(fake.listCapturePagesArgsForCall)]
	fake.listCapturePagesArgsForCall = append(fake.listCapturePagesArgsForCall, struct {
		arg1 context.Context
		arg2 *model.CapturePageFilters
	}{arg1, arg2})
	stub := fake.ListCapturePagesStub
	fakeReturns := fake.listCapturePagesReturns
	fake.recordInvocation("ListCapturePages", []interface{}{arg1, arg2})
	fake.listCapturePagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCapturePageService) ListCapturePagesCallCount() int {
	fake.listCapturePagesMutex.RLock()
	defer fake.listCapturePagesMutex.RUnlock()
	return len(fake.listCapturePagesArgsForCall)
}

func (fake *FakeCapturePageService) ListCapturePagesCalls(stub func(context.Context, *model.CapturePageFilters) (*model.PaginatedCapturePages, error)) {
	fake.listCapturePagesMutex.Lock()
	defer fake.listCapturePagesMutex.Unlock()
	fake.ListCapturePagesStub = stub
}

func (fake *FakeCapturePageService) ListCapturePagesArgsForCall(i int) (context.Context, *model.CapturePageFilters) {
	fake.listCapturePagesMutex.RLock()
	defer fake.listCapturePagesMutex.RUnlock()
	argsForCall := fake.listCapturePagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCapturePageService) ListCapturePagesReturns(result1 *model.PaginatedCapturePages, result2 error) {
	fake.listCapturePagesMutex.Lock()
	defer fake.listCapturePagesMutex.Unlock()
	fake.ListCapturePagesStub = nil
	fake.listCapturePagesReturns = struct {
		result1 *model.PaginatedCapturePages
		result2 error
	}{result1, result2}
}

func (fake *FakeCapturePageService) ListCapturePagesReturnsOnCall(i int, result1 *model.PaginatedCapturePages, result2 error) {
	fake.listCapturePagesMutex.Lock()
	defer fake.listCapturePagesMutex.Unlock()
	fake.ListCapturePagesStub = nil
	if fake.listCapturePagesReturnsOnCall == nil {
		fake.listCapturePagesReturnsOnCall = make(map[int]struct {
			result1 *model.PaginatedCapturePages
			result2 error
		})
	}
	fake.listCapturePagesReturnsOnCall[i] = struct {
		result1 *model.PaginatedCapturePages
		result2 error
	}{result1, result2}
}

func (fake *FakeCapturePageService) RestoreCapturePage(arg1 context.Context, arg2 *model.RestoreCapturePage) error {
	fake.restoreCapturePageMutex.Lock()
	ret, specificReturn := fake.restoreCapturePageReturnsOnCall[len(fake.restoreCapturePageArgsForCall)]
	fake.restoreCapturePageArgsForCall = append(fake.restoreCapturePageArgsForCall, struct {
		arg1 context.Context
		arg2 *model.RestoreCapturePage
	}{arg1, arg2})
	stub := fake.RestoreCapturePageStub
	fakeReturns := fake.restoreCapturePageReturns
	fake.recordInvocation("RestoreCapturePage", []interface{}{arg1, arg2})
	fake.restoreCapturePageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCapturePageService) RestoreCapturePageCallCount() int {
	fake.restoreCapturePageMutex.RLock()
	defer fake.restoreCapturePageMutex.RUnlock()
	return len(fake.restoreCapturePageArgsForCall)
}

func (fake *FakeCapturePageService) RestoreCapturePageCalls(stub func(context.Context, *model.RestoreCapturePage) error) {
	fake.restoreCapturePageMutex.Lock()
	defer fake.restoreCapturePageMutex.Unlock()
	fake.RestoreCapturePageStub = stub
}

func (fake *FakeCapturePageService) RestoreCapturePageArgsForCall(i int) (context.Context, *model.RestoreCapturePage) {
	fake.restoreCapturePageMutex.RLock()
	defer fake.restoreCapturePageMutex.RUnlock()
	argsForCall := fake.restoreCapturePageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCapturePageService) RestoreCapturePageReturns(result1 error) {
	fake.restoreCapturePageMutex.Lock()
	defer fake.restoreCapturePageMutex.Unlock()
	fake.RestoreCapturePageStub = nil
	fake.restoreCapturePageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCapturePageService) RestoreCapturePageReturnsOnCall(i int, result1 error) {
	fake.restoreCapturePageMutex.Lock()
	defer fake.restoreCapturePageMutex.Unlock()
	fake.RestoreCapturePageStub = nil
	if fake.restoreCapturePageReturnsOnCall == nil {
		fake.restoreCapturePageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.restoreCapturePageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCapturePageService) UpdateCapturePage(arg1 context.Context, arg2 *model.UpdateCapturePage) (*model.CapturePage, error) {
	fake.updateCapturePageMutex.Lock()
	ret, specificReturn := fake.updateCapturePageReturnsOnCall[len(fake.updateCapturePageArgsForCall)]
	fake.updateCapturePageArgsForCall = append(fake.updateCapturePageArgsForCall, struct {
		arg1 context.Context
		arg2 *model.UpdateCapturePage
	}{arg1, arg2})
	stub := fake.UpdateCapturePageStub
	fakeReturns := fake.updateCapturePageReturns
	fake.recordInvocation("UpdateCapturePage", []interface{}{arg1, arg2})
	fake.updateCapturePageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCapturePageService) UpdateCapturePageCallCount() int {
	fake.updateCapturePageMutex.RLock()
	defer fake.updateCapturePageMutex.RUnlock()
	return len(fake.updateCapturePageArgsForCall)
}

func (fake *FakeCapturePageService) UpdateCapturePageCalls(stub func(context.Context, *model.UpdateCapturePage) (*model.CapturePage, error)) {
	fake.updateCapturePageMutex.Lock()
	defer fake.updateCapturePageMutex.Unlock()
	fake.UpdateCapturePageStub = stub
}

func (fake *FakeCapturePageService) UpdateCapturePageArgsForCall(i int) (context.Context, *model.UpdateCapturePage) {
	fake.updateCapturePageMutex.RLock()
	defer fake.updateCapturePageMutex.RUnlock()
	argsForCall := fake.updateCapturePageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCapturePageService) UpdateCapturePageReturns(result1 *model.CapturePage, result2 error) {
	fake.updateCapturePageMutex.Lock()
	defer fake.updateCapturePageMutex.Unlock()
	fake.UpdateCapturePageStub = nil
	fake.updateCapturePageReturns = struct {
		result1 *model.CapturePage
		result2 error
	}{result1, result2}
}

func (fake *FakeCapturePageService) UpdateCapturePageReturnsOnCall(i int, result1 *model.CapturePage, result2 error) {
	fake.updateCapturePageMutex.Lock()
	defer fake.updateCapturePageMutex.Unlock()
	fake.UpdateCapturePageStub = nil
	if fake.updateCapturePageReturnsOnCall == nil {
		fake.updateCapturePageReturnsOnCall = make(map[int]struct {
			result1 *model.CapturePage
			result2 error
		})
	}
	fake.updateCapturePageReturnsOnCall[i] = struct {
		result1 *model.CapturePage
		result2 error
	}{result1, result2}
}

func (fake *FakeCapturePageService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createCapturePageMutex.RLock()
	defer fake.createCapturePageMutex.RUnlock()
	fake.deleteCapturePageMutex.RLock()
	defer fake.deleteCapturePageMutex.RUnlock()
	fake.listCapturePagesMutex.RLock()
	defer fake.listCapturePagesMutex.RUnlock()
	fake.restoreCapturePageMutex.RLock()
	defer fake.restoreCapturePageMutex.RUnlock()
	fake.updateCapturePageMutex.RLock()
	defer fake.updateCapturePageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCapturePageService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
