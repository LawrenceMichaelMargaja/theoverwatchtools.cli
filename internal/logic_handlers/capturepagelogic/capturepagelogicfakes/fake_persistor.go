// Code generated by counterfeiter. DO NOT EDIT.
package capturepagelogicfakes

import (
	"context"
	"sync"

	"github.com/dembygenesis/local.tools/internal/model"
	"github.com/dembygenesis/local.tools/internal/persistence"
)

type FakePersistor struct {
	AddCapturePageStub        func(context.Context, persistence.TransactionHandler, *model.CreateCapturePage) (*model.CapturePage, error)
	addCapturePageMutex       sync.RWMutex
	addCapturePageArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.CreateCapturePage
	}
	addCapturePageReturns struct {
		result1 *model.CapturePage
		result2 error
	}
	addCapturePageReturnsOnCall map[int]struct {
		result1 *model.CapturePage
		result2 error
	}
	CreateCapturePageStub        func(context.Context, persistence.TransactionHandler, *model.CapturePage) (*model.CapturePage, error)
	createCapturePageMutex       sync.RWMutex
	createCapturePageArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.CapturePage
	}
	createCapturePageReturns struct {
		result1 *model.CapturePage
		result2 error
	}
	createCapturePageReturnsOnCall map[int]struct {
		result1 *model.CapturePage
		result2 error
	}
	DeleteCapturePageStub        func(context.Context, persistence.TransactionHandler, int) error
	deleteCapturePageMutex       sync.RWMutex
	deleteCapturePageArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 int
	}
	deleteCapturePageReturns struct {
		result1 error
	}
	deleteCapturePageReturnsOnCall map[int]struct {
		result1 error
	}
	GetCapturePageByNameStub        func(context.Context, persistence.TransactionHandler, string) (*model.CapturePage, error)
	getCapturePageByNameMutex       sync.RWMutex
	getCapturePageByNameArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 string
	}
	getCapturePageByNameReturns struct {
		result1 *model.CapturePage
		result2 error
	}
	getCapturePageByNameReturnsOnCall map[int]struct {
		result1 *model.CapturePage
		result2 error
	}
	GetCapturePageSetByIdStub        func(context.Context, persistence.TransactionHandler, int) (*model.CapturePageSet, error)
	getCapturePageSetByIdMutex       sync.RWMutex
	getCapturePageSetByIdArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 int
	}
	getCapturePageSetByIdReturns struct {
		result1 *model.CapturePageSet
		result2 error
	}
	getCapturePageSetByIdReturnsOnCall map[int]struct {
		result1 *model.CapturePageSet
		result2 error
	}
	GetCapturePagesStub        func(context.Context, persistence.TransactionHandler, *model.CapturePageFilters) (*model.PaginatedCapturePages, error)
	getCapturePagesMutex       sync.RWMutex
	getCapturePagesArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.CapturePageFilters
	}
	getCapturePagesReturns struct {
		result1 *model.PaginatedCapturePages
		result2 error
	}
	getCapturePagesReturnsOnCall map[int]struct {
		result1 *model.PaginatedCapturePages
		result2 error
	}
	RestoreCapturePageStub        func(context.Context, persistence.TransactionHandler, int) error
	restoreCapturePageMutex       sync.RWMutex
	restoreCapturePageArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 int
	}
	restoreCapturePageReturns struct {
		result1 error
	}
	restoreCapturePageReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateCapturePageStub        func(context.Context, persistence.TransactionHandler, *model.UpdateCapturePage) (*model.CapturePage, error)
	updateCapturePageMutex       sync.RWMutex
	updateCapturePageArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.UpdateCapturePage
	}
	updateCapturePageReturns struct {
		result1 *model.CapturePage
		result2 error
	}
	updateCapturePageReturnsOnCall map[int]struct {
		result1 *model.CapturePage
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePersistor) AddCapturePage(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 *model.CreateCapturePage) (*model.CapturePage, error) {
	fake.addCapturePageMutex.Lock()
	ret, specificReturn := fake.addCapturePageReturnsOnCall[len(fake.addCapturePageArgsForCall)]
	fake.addCapturePageArgsForCall = append(fake.addCapturePageArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.CreateCapturePage
	}{arg1, arg2, arg3})
	stub := fake.AddCapturePageStub
	fakeReturns := fake.addCapturePageReturns
	fake.recordInvocation("AddCapturePage", []interface{}{arg1, arg2, arg3})
	fake.addCapturePageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistor) AddCapturePageCallCount() int {
	fake.addCapturePageMutex.RLock()
	defer fake.addCapturePageMutex.RUnlock()
	return len(fake.addCapturePageArgsForCall)
}

func (fake *FakePersistor) AddCapturePageCalls(stub func(context.Context, persistence.TransactionHandler, *model.CreateCapturePage) (*model.CapturePage, error)) {
	fake.addCapturePageMutex.Lock()
	defer fake.addCapturePageMutex.Unlock()
	fake.AddCapturePageStub = stub
}

func (fake *FakePersistor) AddCapturePageArgsForCall(i int) (context.Context, persistence.TransactionHandler, *model.CreateCapturePage) {
	fake.addCapturePageMutex.RLock()
	defer fake.addCapturePageMutex.RUnlock()
	argsForCall := fake.addCapturePageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) AddCapturePageReturns(result1 *model.CapturePage, result2 error) {
	fake.addCapturePageMutex.Lock()
	defer fake.addCapturePageMutex.Unlock()
	fake.AddCapturePageStub = nil
	fake.addCapturePageReturns = struct {
		result1 *model.CapturePage
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) AddCapturePageReturnsOnCall(i int, result1 *model.CapturePage, result2 error) {
	fake.addCapturePageMutex.Lock()
	defer fake.addCapturePageMutex.Unlock()
	fake.AddCapturePageStub = nil
	if fake.addCapturePageReturnsOnCall == nil {
		fake.addCapturePageReturnsOnCall = make(map[int]struct {
			result1 *model.CapturePage
			result2 error
		})
	}
	fake.addCapturePageReturnsOnCall[i] = struct {
		result1 *model.CapturePage
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) CreateCapturePage(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 *model.CapturePage) (*model.CapturePage, error) {
	fake.createCapturePageMutex.Lock()
	ret, specificReturn := fake.createCapturePageReturnsOnCall[len(fake.createCapturePageArgsForCall)]
	fake.createCapturePageArgsForCall = append(fake.createCapturePageArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.CapturePage
	}{arg1, arg2, arg3})
	stub := fake.CreateCapturePageStub
	fakeReturns := fake.createCapturePageReturns
	fake.recordInvocation("CreateCapturePage", []interface{}{arg1, arg2, arg3})
	fake.createCapturePageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistor) CreateCapturePageCallCount() int {
	fake.createCapturePageMutex.RLock()
	defer fake.createCapturePageMutex.RUnlock()
	return len(fake.createCapturePageArgsForCall)
}

func (fake *FakePersistor) CreateCapturePageCalls(stub func(context.Context, persistence.TransactionHandler, *model.CapturePage) (*model.CapturePage, error)) {
	fake.createCapturePageMutex.Lock()
	defer fake.createCapturePageMutex.Unlock()
	fake.CreateCapturePageStub = stub
}

func (fake *FakePersistor) CreateCapturePageArgsForCall(i int) (context.Context, persistence.TransactionHandler, *model.CapturePage) {
	fake.createCapturePageMutex.RLock()
	defer fake.createCapturePageMutex.RUnlock()
	argsForCall := fake.createCapturePageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) CreateCapturePageReturns(result1 *model.CapturePage, result2 error) {
	fake.createCapturePageMutex.Lock()
	defer fake.createCapturePageMutex.Unlock()
	fake.CreateCapturePageStub = nil
	fake.createCapturePageReturns = struct {
		result1 *model.CapturePage
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) CreateCapturePageReturnsOnCall(i int, result1 *model.CapturePage, result2 error) {
	fake.createCapturePageMutex.Lock()
	defer fake.createCapturePageMutex.Unlock()
	fake.CreateCapturePageStub = nil
	if fake.createCapturePageReturnsOnCall == nil {
		fake.createCapturePageReturnsOnCall = make(map[int]struct {
			result1 *model.CapturePage
			result2 error
		})
	}
	fake.createCapturePageReturnsOnCall[i] = struct {
		result1 *model.CapturePage
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) DeleteCapturePage(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 int) error {
	fake.deleteCapturePageMutex.Lock()
	ret, specificReturn := fake.deleteCapturePageReturnsOnCall[len(fake.deleteCapturePageArgsForCall)]
	fake.deleteCapturePageArgsForCall = append(fake.deleteCapturePageArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.DeleteCapturePageStub
	fakeReturns := fake.deleteCapturePageReturns
	fake.recordInvocation("DeleteCapturePage", []interface{}{arg1, arg2, arg3})
	fake.deleteCapturePageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePersistor) DeleteCapturePageCallCount() int {
	fake.deleteCapturePageMutex.RLock()
	defer fake.deleteCapturePageMutex.RUnlock()
	return len(fake.deleteCapturePageArgsForCall)
}

func (fake *FakePersistor) DeleteCapturePageCalls(stub func(context.Context, persistence.TransactionHandler, int) error) {
	fake.deleteCapturePageMutex.Lock()
	defer fake.deleteCapturePageMutex.Unlock()
	fake.DeleteCapturePageStub = stub
}

func (fake *FakePersistor) DeleteCapturePageArgsForCall(i int) (context.Context, persistence.TransactionHandler, int) {
	fake.deleteCapturePageMutex.RLock()
	defer fake.deleteCapturePageMutex.RUnlock()
	argsForCall := fake.deleteCapturePageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) DeleteCapturePageReturns(result1 error) {
	fake.deleteCapturePageMutex.Lock()
	defer fake.deleteCapturePageMutex.Unlock()
	fake.DeleteCapturePageStub = nil
	fake.deleteCapturePageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistor) DeleteCapturePageReturnsOnCall(i int, result1 error) {
	fake.deleteCapturePageMutex.Lock()
	defer fake.deleteCapturePageMutex.Unlock()
	fake.DeleteCapturePageStub = nil
	if fake.deleteCapturePageReturnsOnCall == nil {
		fake.deleteCapturePageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteCapturePageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistor) GetCapturePageByName(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 string) (*model.CapturePage, error) {
	fake.getCapturePageByNameMutex.Lock()
	ret, specificReturn := fake.getCapturePageByNameReturnsOnCall[len(fake.getCapturePageByNameArgsForCall)]
	fake.getCapturePageByNameArgsForCall = append(fake.getCapturePageByNameArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetCapturePageByNameStub
	fakeReturns := fake.getCapturePageByNameReturns
	fake.recordInvocation("GetCapturePageByName", []interface{}{arg1, arg2, arg3})
	fake.getCapturePageByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistor) GetCapturePageByNameCallCount() int {
	fake.getCapturePageByNameMutex.RLock()
	defer fake.getCapturePageByNameMutex.RUnlock()
	return len(fake.getCapturePageByNameArgsForCall)
}

func (fake *FakePersistor) GetCapturePageByNameCalls(stub func(context.Context, persistence.TransactionHandler, string) (*model.CapturePage, error)) {
	fake.getCapturePageByNameMutex.Lock()
	defer fake.getCapturePageByNameMutex.Unlock()
	fake.GetCapturePageByNameStub = stub
}

func (fake *FakePersistor) GetCapturePageByNameArgsForCall(i int) (context.Context, persistence.TransactionHandler, string) {
	fake.getCapturePageByNameMutex.RLock()
	defer fake.getCapturePageByNameMutex.RUnlock()
	argsForCall := fake.getCapturePageByNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) GetCapturePageByNameReturns(result1 *model.CapturePage, result2 error) {
	fake.getCapturePageByNameMutex.Lock()
	defer fake.getCapturePageByNameMutex.Unlock()
	fake.GetCapturePageByNameStub = nil
	fake.getCapturePageByNameReturns = struct {
		result1 *model.CapturePage
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) GetCapturePageByNameReturnsOnCall(i int, result1 *model.CapturePage, result2 error) {
	fake.getCapturePageByNameMutex.Lock()
	defer fake.getCapturePageByNameMutex.Unlock()
	fake.GetCapturePageByNameStub = nil
	if fake.getCapturePageByNameReturnsOnCall == nil {
		fake.getCapturePageByNameReturnsOnCall = make(map[int]struct {
			result1 *model.CapturePage
			result2 error
		})
	}
	fake.getCapturePageByNameReturnsOnCall[i] = struct {
		result1 *model.CapturePage
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) GetCapturePageSetById(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 int) (*model.CapturePageSet, error) {
	fake.getCapturePageSetByIdMutex.Lock()
	ret, specificReturn := fake.getCapturePageSetByIdReturnsOnCall[len(fake.getCapturePageSetByIdArgsForCall)]
	fake.getCapturePageSetByIdArgsForCall = append(fake.getCapturePageSetByIdArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.GetCapturePageSetByIdStub
	fakeReturns := fake.getCapturePageSetByIdReturns
	fake.recordInvocation("GetCapturePageSetById", []interface{}{arg1, arg2, arg3})
	fake.getCapturePageSetByIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistor) GetCapturePageSetByIdCallCount() int {
	fake.getCapturePageSetByIdMutex.RLock()
	defer fake.getCapturePageSetByIdMutex.RUnlock()
	return len(fake.getCapturePageSetByIdArgsForCall)
}

func (fake *FakePersistor) GetCapturePageSetByIdCalls(stub func(context.Context, persistence.TransactionHandler, int) (*model.CapturePageSet, error)) {
	fake.getCapturePageSetByIdMutex.Lock()
	defer fake.getCapturePageSetByIdMutex.Unlock()
	fake.GetCapturePageSetByIdStub = stub
}

func (fake *FakePersistor) GetCapturePageSetByIdArgsForCall(i int) (context.Context, persistence.TransactionHandler, int) {
	fake.getCapturePageSetByIdMutex.RLock()
	defer fake.getCapturePageSetByIdMutex.RUnlock()
	argsForCall := fake.getCapturePageSetByIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) GetCapturePageSetByIdReturns(result1 *model.CapturePageSet, result2 error) {
	fake.getCapturePageSetByIdMutex.Lock()
	defer fake.getCapturePageSetByIdMutex.Unlock()
	fake.GetCapturePageSetByIdStub = nil
	fake.getCapturePageSetByIdReturns = struct {
		result1 *model.CapturePageSet
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) GetCapturePageSetByIdReturnsOnCall(i int, result1 *model.CapturePageSet, result2 error) {
	fake.getCapturePageSetByIdMutex.Lock()
	defer fake.getCapturePageSetByIdMutex.Unlock()
	fake.GetCapturePageSetByIdStub = nil
	if fake.getCapturePageSetByIdReturnsOnCall == nil {
		fake.getCapturePageSetByIdReturnsOnCall = make(map[int]struct {
			result1 *model.CapturePageSet
			result2 error
		})
	}
	fake.getCapturePageSetByIdReturnsOnCall[i] = struct {
		result1 *model.CapturePageSet
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) GetCapturePages(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 *model.CapturePageFilters) (*model.PaginatedCapturePages, error) {
	fake.getCapturePagesMutex.Lock()
	ret, specificReturn := fake.getCapturePagesReturnsOnCall[len(fake.getCapturePagesArgsForCall)]
	fake.getCapturePagesArgsForCall = append(fake.getCapturePagesArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.CapturePageFilters
	}{arg1, arg2, arg3})
	stub := fake.GetCapturePagesStub
	fakeReturns := fake.getCapturePagesReturns
	fake.recordInvocation("GetCapturePages", []interface{}{arg1, arg2, arg3})
	fake.getCapturePagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistor) GetCapturePagesCallCount() int {
	fake.getCapturePagesMutex.RLock()
	defer fake.getCapturePagesMutex.RUnlock()
	return len(fake.getCapturePagesArgsForCall)
}

func (fake *FakePersistor) GetCapturePagesCalls(stub func(context.Context, persistence.TransactionHandler, *model.CapturePageFilters) (*model.PaginatedCapturePages, error)) {
	fake.getCapturePagesMutex.Lock()
	defer fake.getCapturePagesMutex.Unlock()
	fake.GetCapturePagesStub = stub
}

func (fake *FakePersistor) GetCapturePagesArgsForCall(i int) (context.Context, persistence.TransactionHandler, *model.CapturePageFilters) {
	fake.getCapturePagesMutex.RLock()
	defer fake.getCapturePagesMutex.RUnlock()
	argsForCall := fake.getCapturePagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) GetCapturePagesReturns(result1 *model.PaginatedCapturePages, result2 error) {
	fake.getCapturePagesMutex.Lock()
	defer fake.getCapturePagesMutex.Unlock()
	fake.GetCapturePagesStub = nil
	fake.getCapturePagesReturns = struct {
		result1 *model.PaginatedCapturePages
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) GetCapturePagesReturnsOnCall(i int, result1 *model.PaginatedCapturePages, result2 error) {
	fake.getCapturePagesMutex.Lock()
	defer fake.getCapturePagesMutex.Unlock()
	fake.GetCapturePagesStub = nil
	if fake.getCapturePagesReturnsOnCall == nil {
		fake.getCapturePagesReturnsOnCall = make(map[int]struct {
			result1 *model.PaginatedCapturePages
			result2 error
		})
	}
	fake.getCapturePagesReturnsOnCall[i] = struct {
		result1 *model.PaginatedCapturePages
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) RestoreCapturePage(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 int) error {
	fake.restoreCapturePageMutex.Lock()
	ret, specificReturn := fake.restoreCapturePageReturnsOnCall[len(fake.restoreCapturePageArgsForCall)]
	fake.restoreCapturePageArgsForCall = append(fake.restoreCapturePageArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.RestoreCapturePageStub
	fakeReturns := fake.restoreCapturePageReturns
	fake.recordInvocation("RestoreCapturePage", []interface{}{arg1, arg2, arg3})
	fake.restoreCapturePageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePersistor) RestoreCapturePageCallCount() int {
	fake.restoreCapturePageMutex.RLock()
	defer fake.restoreCapturePageMutex.RUnlock()
	return len(fake.restoreCapturePageArgsForCall)
}

func (fake *FakePersistor) RestoreCapturePageCalls(stub func(context.Context, persistence.TransactionHandler, int) error) {
	fake.restoreCapturePageMutex.Lock()
	defer fake.restoreCapturePageMutex.Unlock()
	fake.RestoreCapturePageStub = stub
}

func (fake *FakePersistor) RestoreCapturePageArgsForCall(i int) (context.Context, persistence.TransactionHandler, int) {
	fake.restoreCapturePageMutex.RLock()
	defer fake.restoreCapturePageMutex.RUnlock()
	argsForCall := fake.restoreCapturePageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) RestoreCapturePageReturns(result1 error) {
	fake.restoreCapturePageMutex.Lock()
	defer fake.restoreCapturePageMutex.Unlock()
	fake.RestoreCapturePageStub = nil
	fake.restoreCapturePageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistor) RestoreCapturePageReturnsOnCall(i int, result1 error) {
	fake.restoreCapturePageMutex.Lock()
	defer fake.restoreCapturePageMutex.Unlock()
	fake.RestoreCapturePageStub = nil
	if fake.restoreCapturePageReturnsOnCall == nil {
		fake.restoreCapturePageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.restoreCapturePageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistor) UpdateCapturePage(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 *model.UpdateCapturePage) (*model.CapturePage, error) {
	fake.updateCapturePageMutex.Lock()
	ret, specificReturn := fake.updateCapturePageReturnsOnCall[len(fake.updateCapturePageArgsForCall)]
	fake.updateCapturePageArgsForCall = append(fake.updateCapturePageArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.UpdateCapturePage
	}{arg1, arg2, arg3})
	stub := fake.UpdateCapturePageStub
	fakeReturns := fake.updateCapturePageReturns
	fake.recordInvocation("UpdateCapturePage", []interface{}{arg1, arg2, arg3})
	fake.updateCapturePageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistor) UpdateCapturePageCallCount() int {
	fake.updateCapturePageMutex.RLock()
	defer fake.updateCapturePageMutex.RUnlock()
	return len(fake.updateCapturePageArgsForCall)
}

func (fake *FakePersistor) UpdateCapturePageCalls(stub func(context.Context, persistence.TransactionHandler, *model.UpdateCapturePage) (*model.CapturePage, error)) {
	fake.updateCapturePageMutex.Lock()
	defer fake.updateCapturePageMutex.Unlock()
	fake.UpdateCapturePageStub = stub
}

func (fake *FakePersistor) UpdateCapturePageArgsForCall(i int) (context.Context, persistence.TransactionHandler, *model.UpdateCapturePage) {
	fake.updateCapturePageMutex.RLock()
	defer fake.updateCapturePageMutex.RUnlock()
	argsForCall := fake.updateCapturePageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) UpdateCapturePageReturns(result1 *model.CapturePage, result2 error) {
	fake.updateCapturePageMutex.Lock()
	defer fake.updateCapturePageMutex.Unlock()
	fake.UpdateCapturePageStub = nil
	fake.updateCapturePageReturns = struct {
		result1 *model.CapturePage
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) UpdateCapturePageReturnsOnCall(i int, result1 *model.CapturePage, result2 error) {
	fake.updateCapturePageMutex.Lock()
	defer fake.updateCapturePageMutex.Unlock()
	fake.UpdateCapturePageStub = nil
	if fake.updateCapturePageReturnsOnCall == nil {
		fake.updateCapturePageReturnsOnCall = make(map[int]struct {
			result1 *model.CapturePage
			result2 error
		})
	}
	fake.updateCapturePageReturnsOnCall[i] = struct {
		result1 *model.CapturePage
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addCapturePageMutex.RLock()
	defer fake.addCapturePageMutex.RUnlock()
	fake.createCapturePageMutex.RLock()
	defer fake.createCapturePageMutex.RUnlock()
	fake.deleteCapturePageMutex.RLock()
	defer fake.deleteCapturePageMutex.RUnlock()
	fake.getCapturePageByNameMutex.RLock()
	defer fake.getCapturePageByNameMutex.RUnlock()
	fake.getCapturePageSetByIdMutex.RLock()
	defer fake.getCapturePageSetByIdMutex.RUnlock()
	fake.getCapturePagesMutex.RLock()
	defer fake.getCapturePagesMutex.RUnlock()
	fake.restoreCapturePageMutex.RLock()
	defer fake.restoreCapturePageMutex.RUnlock()
	fake.updateCapturePageMutex.RLock()
	defer fake.updateCapturePageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePersistor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
